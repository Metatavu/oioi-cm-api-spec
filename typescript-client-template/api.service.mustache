{{#imports}}
import { {{classname}} } from '../{{filename}}';
{{/imports}}
import * as URI from "urijs";
import { ApiUtils } from "./api";

{{#operations}}
export class {{classname}} {

  private rptToken: string;
  private token: string;
  private basePath: string;

  constructor(basePath: string, token: string) {
    this.token = token;
    this.basePath = basePath;
  }

{{#operation}}

  /**
   * {{&notes}}
   {{#summary}}
   * @summary {{&summary}}
   {{/summary}}
{{#allParams}}   * @param {{paramName}} {{description}}
{{/allParams}}
  */
  public async {{nickname}}({{#allParams}}{{^isConstEnumParam}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/isConstEnumParam}}{{/allParams}} retrying?: boolean):Promise<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
    const uri = new URI(`${this.basePath}{{{path}}}`);
{{#hasQueryParams}}
{{#queryParams}}
    {{#isListContainer}}
    if ({{paramName}}) {
    {{#isCollectionFormatMulti}}
        {{paramName}}.forEach((element) => {
          uri.addQuery('{{baseName}}', <any>element);
        })
    {{/isCollectionFormatMulti}}
    {{^isCollectionFormatMulti}}
        uri.addQuery('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS['{{collectionFormat}}']));
    {{/isCollectionFormatMulti}}
    }
    {{/isListContainer}}
    {{^isListContainer}}
    if ({{paramName}} !== undefined && {{paramName}} !== null) {
    {{#isDateTime}}
        uri.addQuery('{{baseName}}', <any>{{paramName}}.toISOString());
    {{/isDateTime}}
    {{^isDateTime}}
        uri.addQuery('{{baseName}}', <any>{{paramName}});
    {{/isDateTime}}
    }
    {{/isListContainer}}
{{/queryParams}}
{{/hasQueryParams}}
    const options = {
      method: "{{httpMethod}}",
      headers: {
        {{#hasHeaderParams}}
        {{#headerParams}}
        "{{baseName}}" : {{paramName}},
        {{/headerParams}}
        {{/hasHeaderParams}}
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.rptToken ? this.rptToken : this.token}`
      }{{#isBodyAllowed}}{{#bodyParam}},
      body: JSON.stringify({{paramName}}){{/bodyParam}}{{/isBodyAllowed}}
    };

    const response = await fetch(uri.toString(), options);

    if (!retrying && response.status == 401) {
      const ticket = ApiUtils.getUMATicket(response);
      const authorization = response.headers.get("Authorization");
      const rptToken = await ApiUtils.getRPT(authorization, ticket);
      this.rptToken = rptToken ? rptToken["access_token"] : null;
      if (this.rptToken) {
        return this.{{nickname}}({{#allParams}}{{paramName}},{{/allParams}}true);
      }
    }

    return ApiUtils.handleResponse(response);
  }

{{/operation}}
{{/operations}}
}